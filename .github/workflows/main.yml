name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  PROJECT_ID: gcpportfolio-469108
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER_NAME }}  
  GKE_REGION: us-central1              
  DEPLOYMENT_NAME: portfolio-deployment
  IMAGE: gcp-portfolio-app
  REGISTRY_LOCATION: us-central1
  REPOSITORY: my-gcp-app-repo

jobs:
  build-test-deploy:
    name: Build, Test, and Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: |
        npm run test --if-present
        npm audit --audit-level high

    - name: Run ESLint
      run: |
        npx eslint backend/ --ext .js --fix-dry-run || echo "ESLint warnings found"

    # Configure Workload Identity or Service Account
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'

    - name: 'Configure Docker to use gcloud as credential helper'
      run: |
        gcloud auth configure-docker $REGISTRY_LOCATION-docker.pkg.dev

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials "$GKE_CLUSTER" --region "$GKE_REGION" --project "$PROJECT_ID"

    - name: Build Docker image
      run: |
        docker build -t "$REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA" .
        docker build -t "$REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:latest" .

    - name: Run security scan
      run: |
        # Install Trivy
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy
        
        # Scan the image
        trivy image --exit-code 0 --severity HIGH,CRITICAL "$REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"

    - name: Push Docker image
      run: |
        docker push "$REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"
        docker push "$REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:latest"

    - name: Deploy to GKE
      run: |
        # Update the deployment with new image
        kubectl set image deployment/$DEPLOYMENT_NAME portfolio=$REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA
        
        # Wait for rollout to complete
        kubectl rollout status deployment/$DEPLOYMENT_NAME --timeout=300s
        
        # Verify deployment
        kubectl get services -o wide

    - name: Health Check
      run: |
        # Wait for pods to be ready
        kubectl wait --for=condition=ready pod -l app=portfolio --timeout=300s
        
        # Get service external IP and test
        EXTERNAL_IP=$(kubectl get svc portfolio-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        if [ ! -z "$EXTERNAL_IP" ]; then
          echo "Testing main endpoint..."
          for i in {1..10}; do
            if curl -f --max-time 10 http://$EXTERNAL_IP/ >/dev/null 2>&1; then
              echo "✅ Health check passed!"
              break
            fi
            echo "Attempt $i failed, retrying in 10 seconds..."
            sleep 10
          done
        else
          echo "External IP not yet assigned, checking pod status..."
          kubectl get pods -l app=portfolio
        fi

    - name: Cleanup old images
      run: |
        # Keep only the 5 most recent images
        gcloud artifacts docker images list $REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE \
          --sort-by="~UPDATE_TIME" --format="value(version)" \
          | tail -n +6 \
          | xargs -I {} gcloud artifacts docker images delete $REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:{} --quiet || true

    - name: Rollback on failure
      if: failure()
      run: |
        echo "Deployment failed. Rolling back..."
        kubectl rollout undo deployment/$DEPLOYMENT_NAME
        kubectl rollout status deployment/$DEPLOYMENT_NAME --timeout=300s

    - name: Notify on success
      if: success()
      run: |
        echo "✅ Deployment successful!"
        echo "Image: $REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"
        echo "Cluster: $GKE_CLUSTER"

    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ Deployment failed!"
        echo "Check the logs above for details."
